# 德国利息计算器 - Nginx 站点配置
# 优化的生产环境配置

server {
    listen 80;
    listen [::]:80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;
    
    # 安全设置
    server_tokens off;
    
    # 连接限制
    limit_conn conn_limit_per_ip 20;
    
    # 日志设置
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # 字符集
    charset utf-8;
    
    # ================================
    # 静态资源缓存策略
    # ================================
    
    # HTML文件 - 不缓存，确保更新及时
    location ~* \.html$ {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        
        # 安全头
        include /etc/nginx/conf.d/security-headers.conf;
        
        try_files $uri $uri/ /index.html;
    }
    
    # JavaScript和CSS文件 - 长期缓存（带版本号）
    location ~* \.(js|css)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # 预压缩文件支持
        gzip_static on;
        
        try_files $uri =404;
    }
    
    # 图片和字体文件 - 长期缓存
    location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        try_files $uri =404;
    }
    
    # JSON数据文件 - 短期缓存
    location ~* \.json$ {
        expires 1h;
        add_header Cache-Control "public";
        add_header Vary "Accept-Encoding";
        
        try_files $uri =404;
    }
    
    # ================================
    # API代理设置
    # ================================
    
    # 代理到后端API（如果需要）
    location /api/ {
        # 速率限制
        limit_req zone=api burst=20 nodelay;
        
        # 代理设置
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # 超时设置
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # 缓存设置
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;
    }
    
    # ================================
    # 特殊路由处理
    # ================================
    
    # 健康检查端点
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # 状态监控端点
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
    
    # robots.txt
    location = /robots.txt {
        expires 1d;
        add_header Cache-Control "public";
        try_files $uri =404;
    }
    
    # sitemap.xml
    location = /sitemap.xml {
        expires 1d;
        add_header Cache-Control "public";
        try_files $uri =404;
    }
    
    # ================================
    # SPA路由支持
    # ================================
    
    # Vue Router 历史模式支持
    location / {
        try_files $uri $uri/ @fallback;
    }
    
    location @fallback {
        rewrite ^.*$ /index.html last;
    }
    
    # ================================
    # 安全设置
    # ================================
    
    # 隐藏敏感文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 隐藏配置文件
    location ~* \.(conf|config|env)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 防止访问源码文件
    location ~* \.(ts|vue|map)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # ================================
    # 错误页面
    # ================================
    
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
        try_files /404.html /index.html;
    }
    
    location = /50x.html {
        internal;
        try_files /50x.html /index.html;
    }
}

# ================================
# HTTPS配置（生产环境）
# ================================
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;
    
    # SSL证书配置
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # SSL设置
    include /etc/nginx/conf.d/ssl.conf;
    
    # 其他配置与HTTP相同
    include /etc/nginx/conf.d/security-headers.conf;
    
    # 重定向HTTP到HTTPS
    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }
    
    # 复用HTTP配置
    location / {
        try_files $uri $uri/ @fallback;
    }
    
    location @fallback {
        rewrite ^.*$ /index.html last;
    }
    
    # 静态资源配置（与HTTP相同）
    location ~* \.html$ {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        include /etc/nginx/conf.d/security-headers.conf;
        try_files $uri $uri/ /index.html;
    }
    
    location ~* \.(js|css)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        gzip_static on;
        try_files $uri =404;
    }
    
    location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }
    
    # API代理（与HTTP相同）
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
    
    # 健康检查
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
