# 测试工作流
# 专门用于运行各种测试的GitHub Actions工作流

name: Test Suite

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天凌晨2点运行完整测试套件
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # ================================
  # 单元测试矩阵
  # ================================
  unit-tests:
    name: Unit Tests (Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20]
        exclude:
          # 减少Windows和macOS的测试组合以节省资源
          - os: windows-latest
            node-version: 16
          - os: macos-latest
            node-version: 16
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --coverage --reporter=verbose

      - name: Generate test report
        if: always()
        run: npm run test:unit -- --reporter=json --outputFile=test-results.json

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == 18
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: unit-tests-${{ matrix.os }}-${{ matrix.node-version }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results-${{ matrix.os }}-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.json

  # ================================
  # 组件测试
  # ================================
  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run component tests
        run: npm run test:component -- --coverage

      - name: Upload component test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: component-test-results
          path: |
            coverage/
            test-results/

  # ================================
  # 集成测试
  # ================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration
        env:
          REDIS_URL: redis://localhost:6379

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/

  # ================================
  # E2E测试矩阵
  # ================================
  e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2, 3, 4]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/4
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}-${{ matrix.shard }}
          path: |
            playwright-report-${{ matrix.browser }}-${{ matrix.shard }}/
            test-results/

  # ================================
  # 性能测试
  # ================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run bundle analyzer
        run: npm run analyze

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: |
            .lighthouseci/
            bundle-analyzer-report.html

  # ================================
  # 可访问性测试
  # ================================
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run accessibility tests
        run: npm run test:a11y

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-results
          path: accessibility-report/

  # ================================
  # 视觉回归测试
  # ================================
  visual-regression-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run visual regression tests
        run: npm run test:visual

      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-regression-results
          path: |
            visual-regression-report/
            test-results/

  # ================================
  # 测试报告汇总
  # ================================
  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, component-tests, integration-tests, e2e-tests, performance-tests, accessibility-tests, visual-regression-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v3

      - name: Generate combined test report
        run: |
          echo "# Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Status" >> test-summary.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
          echo "- Component Tests: ${{ needs.component-tests.result }}" >> test-summary.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
          echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> test-summary.md
          echo "- Visual Regression Tests: ${{ needs.visual-regression-tests.result }}" >> test-summary.md

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const testSummary = fs.readFileSync('test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testSummary
            });

      - name: Upload combined test report
        uses: actions/upload-artifact@v3
        with:
          name: combined-test-report
          path: test-summary.md

  # ================================
  # 测试覆盖率检查
  # ================================
  coverage-check:
    name: Coverage Check
    runs-on: ubuntu-latest
    needs: [unit-tests, component-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          pattern: '*-test-results-*'

      - name: Merge coverage reports
        run: |
          npx nyc merge coverage/ .nyc_output/coverage.json
          npx nyc report --reporter=lcov --reporter=text-summary

      - name: Check coverage thresholds
        run: |
          npx nyc check-coverage --lines 80 --functions 80 --branches 80 --statements 80

      - name: Upload merged coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: merged
          name: merged-coverage
