# 部署工作流
# 专门用于部署到不同环境的GitHub Actions工作流

name: Deploy

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string
      skip_tests:
        description: 'Skip pre-deployment tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ================================
  # 部署前检查
  # ================================
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    
    outputs:
      deploy-staging: ${{ steps.check.outputs.deploy-staging }}
      deploy-production: ${{ steps.check.outputs.deploy-production }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine deployment targets
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
              echo "deploy-staging=true" >> $GITHUB_OUTPUT
              echo "deploy-production=false" >> $GITHUB_OUTPUT
            else
              echo "deploy-staging=false" >> $GITHUB_OUTPUT
              echo "deploy-production=true" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "deploy-staging=true" >> $GITHUB_OUTPUT
            echo "deploy-production=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "deploy-staging=false" >> $GITHUB_OUTPUT
            echo "deploy-production=true" >> $GITHUB_OUTPUT
          else
            echo "deploy-staging=false" >> $GITHUB_OUTPUT
            echo "deploy-production=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine version
        id: version
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
          fi

      - name: Verify image exists
        run: |
          docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}

  # ================================
  # 部署前测试
  # ================================
  pre-deployment-tests:
    name: Pre-deployment Tests
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run smoke tests against image
        run: |
          docker run --rm -d -p 8080:80 --name test-container \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-checks.outputs.version }}
          
          # 等待容器启动
          sleep 10
          
          # 运行健康检查
          curl -f http://localhost:8080/health || exit 1
          
          # 检查主页
          curl -f http://localhost:8080/ || exit 1
          
          # 清理
          docker stop test-container

  # ================================
  # 部署到Staging环境
  # ================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, pre-deployment-tests]
    if: always() && needs.pre-deployment-checks.outputs.deploy-staging == 'true' && (needs.pre-deployment-tests.result == 'success' || needs.pre-deployment-tests.result == 'skipped')
    environment: 
      name: staging
      url: https://staging.zinses-rechner.de
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          # 更新部署配置中的镜像标签
          sed -i "s|IMAGE_TAG|${{ needs.pre-deployment-checks.outputs.version }}|g" k8s/staging/deployment.yaml
          
          # 应用配置
          kubectl apply -f k8s/staging/
          
          # 等待部署完成
          kubectl rollout status deployment/zinses-rechner-frontend -n staging --timeout=300s

      - name: Run post-deployment tests
        run: |
          # 等待服务就绪
          sleep 30
          
          # 运行健康检查
          curl -f https://staging.zinses-rechner.de/health
          
          # 运行基本功能测试
          npm run test:staging

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: |
            ✅ Staging deployment successful!
            Version: ${{ needs.pre-deployment-checks.outputs.version }}
            URL: https://staging.zinses-rechner.de
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ================================
  # 部署到Production环境
  # ================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, pre-deployment-tests]
    if: always() && needs.pre-deployment-checks.outputs.deploy-production == 'true' && (needs.pre-deployment-tests.result == 'success' || needs.pre-deployment-tests.result == 'skipped')
    environment: 
      name: production
      url: https://zinses-rechner.de
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Create backup
        run: |
          # 备份当前部署
          kubectl get deployment zinses-rechner-frontend -n production -o yaml > backup-deployment.yaml
          
          # 上传备份到S3或其他存储
          # aws s3 cp backup-deployment.yaml s3://backups/deployments/$(date +%Y%m%d-%H%M%S)-deployment.yaml

      - name: Deploy to Kubernetes (Blue-Green)
        run: |
          # 更新部署配置
          sed -i "s|IMAGE_TAG|${{ needs.pre-deployment-checks.outputs.version }}|g" k8s/production/deployment.yaml
          
          # 创建新的部署（Green）
          kubectl apply -f k8s/production/deployment-green.yaml
          
          # 等待Green部署就绪
          kubectl rollout status deployment/zinses-rechner-frontend-green -n production --timeout=600s
          
          # 运行生产前测试
          kubectl port-forward service/zinses-rechner-frontend-green 8080:80 -n production &
          sleep 10
          curl -f http://localhost:8080/health
          pkill -f "kubectl port-forward"
          
          # 切换流量到Green
          kubectl patch service zinses-rechner-frontend -n production -p '{"spec":{"selector":{"version":"green"}}}'
          
          # 等待确认
          sleep 60
          
          # 删除Blue部署
          kubectl delete deployment zinses-rechner-frontend-blue -n production --ignore-not-found=true
          
          # 重命名Green为主部署
          kubectl patch deployment zinses-rechner-frontend-green -n production -p '{"metadata":{"name":"zinses-rechner-frontend"}}'

      - name: Run post-deployment tests
        run: |
          # 等待DNS传播
          sleep 60
          
          # 运行完整的生产测试套件
          npm run test:production
          
          # 运行性能测试
          npm run test:performance:production

      - name: Update monitoring
        run: |
          # 更新监控配置
          curl -X POST "${{ secrets.GRAFANA_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"version": "${{ needs.pre-deployment-checks.outputs.version }}", "environment": "production"}'

      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.pre-deployment-checks.outputs.version }}
          release_name: Release ${{ needs.pre-deployment-checks.outputs.version }}
          body: |
            ## Changes in this Release
            - Automated deployment from ${{ github.sha }}
            - Deployed to production at $(date)
            
            ## Deployment Information
            - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-checks.outputs.version }}
            - Environment: Production
            - URL: https://zinses-rechner.de
          draft: false
          prerelease: false

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: |
            🚀 Production deployment successful!
            Version: ${{ needs.pre-deployment-checks.outputs.version }}
            URL: https://zinses-rechner.de
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ================================
  # 部署失败回滚
  # ================================
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    
    steps:
      - name: Rollback staging
        if: needs.deploy-staging.result == 'failure'
        run: |
          echo "Rolling back staging deployment..."
          # 添加staging回滚逻辑

      - name: Rollback production
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "Rolling back production deployment..."
          # 添加production回滚逻辑

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          message: |
            ⚠️ Deployment failed and rollback initiated!
            Check the logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ================================
  # 部署后清理
  # ================================
  post-deployment-cleanup:
    name: Post-deployment Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up old images
        run: |
          # 清理旧的容器镜像
          echo "Cleaning up old container images..."

      - name: Update deployment status
        run: |
          # 更新部署状态到外部系统
          echo "Updating deployment status..."
