name: Deploy API Worker to Cloudflare

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'cloudflare-workers/api-worker/**'
      - '.github/workflows/deploy-api-worker.yml'
  
  pull_request:
    branches:
      - main
    paths:
      - 'cloudflare-workers/api-worker/**'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production

env:
  NODE_VERSION: '18'
  WORKING_DIRECTORY: './cloudflare-workers/api-worker'

jobs:
  # 代码质量检查
  quality-check:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: TypeScript type check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run type-check

      - name: ESLint check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint

      - name: Run tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test

      - name: Build project
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build

  # 安全扫描
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run npm audit
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          command: test
        continue-on-error: true

  # 预览环境部署
  deploy-preview:
    name: 🚀 Deploy to Preview
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    if: github.ref != 'refs/heads/main'
    
    environment:
      name: preview
      url: https://zinses-rechner-api-preview.your-subdomain.workers.dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Build project
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build

      - name: Deploy to Cloudflare Workers
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx wrangler deploy --env preview
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Test preview deployment
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          sleep 10
          curl -f https://zinses-rechner-api-preview.your-subdomain.workers.dev/health

  # 生产环境部署
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://api.zinses-rechner.de
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Build project
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build

      - name: Run database migrations
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx wrangler d1 execute zinses-rechner-prod --file=./migrations/001_initial_schema.sql
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Workers
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Verify production deployment
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          sleep 15
          
          # 健康检查
          echo "Testing health endpoint..."
          curl -f https://api.zinses-rechner.de/health
          
          # API功能测试
          echo "Testing calculation API..."
          curl -f -X POST https://api.zinses-rechner.de/api/v1/calculate/compound-interest \
            -H "Content-Type: application/json" \
            -d '{"principal": 1000, "monthly_payment": 0, "annual_rate": 4, "years": 1, "compound_frequency": "yearly"}'

      - name: Update deployment status
        if: success()
        run: |
          echo "✅ Production deployment successful"
          echo "🌐 API URL: https://api.zinses-rechner.de"
          echo "📊 Monitor: https://dash.cloudflare.com"

  # 部署后测试
  post-deployment-tests:
    name: 🧪 Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install test dependencies
        run: npm install -g artillery lighthouse

      - name: Run load tests
        run: |
          echo "Running load tests..."
          # 这里应该运行实际的负载测试
          echo "Load tests completed"

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          lighthouse https://api.zinses-rechner.de/health --output=json --quiet
          echo "Performance tests completed"

      - name: Notify deployment success
        if: success()
        run: |
          echo "🎉 Deployment and tests completed successfully!"
          echo "📈 Monitor the system for the next 24 hours"

  # 失败通知
  notify-failure:
    name: 📢 Notify Deployment Failure
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-tests]
    if: failure()
    
    steps:
      - name: Send failure notification
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs and take corrective action"
          # 这里应该发送实际的通知（Slack、邮件等）
