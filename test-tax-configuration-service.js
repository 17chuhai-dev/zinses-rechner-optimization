/**
 * Á®éÊî∂ÈÖçÁΩÆÊúçÂä°ÊµãËØï
 * È™åËØÅÁ®éÊî∂ÈÖçÁΩÆÈÄªËæëÁöÑ‰∏öÂä°Â§ÑÁêÜ„ÄÅÈ™åËØÅ„ÄÅ‰øùÂ≠òÂä†ËΩΩÂíå‰ºòÂåñÂäüËÉΩ
 */

// Ê®°ÊãüÁ®éÊî∂ÈÖçÁΩÆÊúçÂä°
class MockTaxConfigurationService {
  constructor() {
    this.currentSettings = this.getDefaultSettings()
    this.settingsHistory = []
    this.changeCallbacks = new Map()
    this.validationCallbacks = new Map()
    
    console.log('üèõÔ∏è Ê®°ÊãüÁ®éÊî∂ÈÖçÁΩÆÊúçÂä°Â∑≤ÂàùÂßãÂåñ')
  }

  getDefaultSettings() {
    return {
      userInfo: {
        state: 'NW',
        churchTaxType: 'none',
        isMarried: false,
        taxYear: 2024
      },
      abgeltungssteuer: {
        baseTaxRate: 0.25,
        solidarityTaxRate: 0.055,
        churchTax: { type: 'none', rate: 0, state: 'NW' },
        enabled: true,
        calculation: {
          includeChurchTax: false,
          includeSolidarityTax: true,
          roundingMethod: 'round',
          decimalPlaces: 2
        }
      },
      freistellungsauftrag: {
        annualAllowance: 801,
        usedAllowance: 0,
        remainingAllowance: 801,
        allocations: [],
        enabled: true,
        options: {
          autoOptimize: true,
          carryForward: false,
          splitBetweenSpouses: false
        }
      },
      etfTeilfreistellung: {
        exemptionRates: {
          'equity_domestic': 0.30, 'equity_foreign': 0.30, 'mixed_fund': 0.15,
          'bond_fund': 0.00, 'real_estate': 0.60, 'commodity': 0.00, 'other': 0.00
        },
        enabled: true,
        defaultETFType: 'equity_foreign',
        options: {
          applyToDistributions: true,
          applyToCapitalGains: true,
          minimumHoldingPeriod: 12
        }
      },
      advanced: {
        enableDetailedCalculation: true,
        showCalculationSteps: true,
        enableTaxOptimization: true,
        autoSaveSettings: true
      },
      metadata: {
        version: '1.0.0',
        createdAt: new Date(),
        updatedAt: new Date(),
        lastUsed: new Date()
      }
    }
  }

  getCurrentSettings() {
    return { ...this.currentSettings }
  }

  updateSettings(newSettings, skipValidation = false) {
    if (!skipValidation) {
      const validation = this.validateSettings(newSettings)
      if (!validation.isValid) {
        this.triggerValidationCallbacks(validation.errors)
        return false
      }
    }

    // ‰øùÂ≠òÂà∞ÂéÜÂè≤
    this.settingsHistory.push({ ...this.currentSettings })
    if (this.settingsHistory.length > 10) {
      this.settingsHistory = this.settingsHistory.slice(-10)
    }

    // Êõ¥Êñ∞ËÆæÁΩÆ
    this.currentSettings = {
      ...newSettings,
      metadata: {
        ...newSettings.metadata,
        updatedAt: new Date(),
        lastUsed: new Date()
      }
    }

    this.triggerChangeCallbacks()
    return true
  }

  validateSettings(settings) {
    const errors = []

    // Âü∫Á°ÄÈ™åËØÅ
    if (settings.abgeltungssteuer.baseTaxRate < 0 || settings.abgeltungssteuer.baseTaxRate > 1) {
      errors.push('Abgeltungssteuersatz muss zwischen 0% und 100% liegen')
    }

    if (settings.freistellungsauftrag.annualAllowance < 0) {
      errors.push('J√§hrlicher Freibetrag kann nicht negativ sein')
    }

    if (settings.freistellungsauftrag.usedAllowance > settings.freistellungsauftrag.annualAllowance) {
      errors.push('Verwendeter Freibetrag kann nicht gr√∂√üer als der j√§hrliche Freibetrag sein')
    }

    // ‰∏öÂä°ÈÄªËæëÈ™åËØÅ
    if (settings.freistellungsauftrag.enabled) {
      const totalAllocated = settings.freistellungsauftrag.allocations.reduce(
        (sum, allocation) => sum + allocation.allocatedAmount, 0
      )
      
      if (totalAllocated > settings.freistellungsauftrag.annualAllowance) {
        errors.push(
          `Gesamte Freibetrag-Verteilung (${totalAllocated.toFixed(2)}‚Ç¨) √ºberschreitet den j√§hrlichen Freibetrag (${settings.freistellungsauftrag.annualAllowance}‚Ç¨)`
        )
      }
    }

    // Êïô‰ºöÁ®éÈ™åËØÅ
    if (settings.abgeltungssteuer.calculation.includeChurchTax) {
      if (settings.userInfo.churchTaxType === 'none') {
        errors.push('Kirchensteuer kann nicht aktiviert werden, wenn keine Religionszugeh√∂rigkeit gew√§hlt ist')
      }
    }

    // Á®éÊî∂Âπ¥Â∫¶È™åËØÅ
    const currentYear = new Date().getFullYear()
    if (settings.userInfo.taxYear > currentYear + 1) {
      errors.push(`Steuerjahr (${settings.userInfo.taxYear}) kann nicht mehr als ein Jahr in der Zukunft liegen`)
    }

    return {
      isValid: errors.length === 0,
      errors
    }
  }

  calculateTaxPreview(income, etfType) {
    const settings = this.currentSettings
    
    // ÁÆÄÂåñÁöÑÁ®éÊî∂ËÆ°ÁÆó
    let taxableIncome = income
    let exemptAmount = 0

    // Â∫îÁî®ÂÖçÁ®éÈ¢ùÂ∫¶
    if (settings.freistellungsauftrag.enabled) {
      const allowanceUsed = Math.min(income, settings.freistellungsauftrag.remainingAllowance)
      taxableIncome -= allowanceUsed
      exemptAmount += allowanceUsed
    }

    // Â∫îÁî®ETFÈÉ®ÂàÜÂÖçÁ®é
    if (etfType && settings.etfTeilfreistellung.enabled) {
      const exemptionRate = settings.etfTeilfreistellung.exemptionRates[etfType] || 0
      const etfExemption = taxableIncome * exemptionRate
      taxableIncome -= etfExemption
      exemptAmount += etfExemption
    }

    // ËÆ°ÁÆóÁ®éÈ¢ù
    const baseTax = taxableIncome * settings.abgeltungssteuer.baseTaxRate
    const solidarityTax = settings.abgeltungssteuer.calculation.includeSolidarityTax ? 
      baseTax * settings.abgeltungssteuer.solidarityTaxRate : 0
    const churchTax = settings.abgeltungssteuer.calculation.includeChurchTax ? 
      baseTax * settings.abgeltungssteuer.churchTax.rate : 0

    const totalTax = baseTax + solidarityTax + churchTax
    const netIncome = income - totalTax
    const effectiveTaxRate = income > 0 ? totalTax / income : 0

    return {
      taxableIncome,
      exemptAmount,
      baseTax,
      solidarityTax,
      churchTax,
      totalTax,
      netIncome,
      effectiveTaxRate,
      calculatedAt: new Date()
    }
  }

  optimizeAllowanceAllocation() {
    const allocations = [...this.currentSettings.freistellungsauftrag.allocations]
    const totalAllowance = this.currentSettings.freistellungsauftrag.annualAllowance

    // ÊåâÊïàÁéáÊéíÂ∫è
    allocations.sort((a, b) => {
      const aEfficiency = a.usedAmount / Math.max(a.allocatedAmount, 1)
      const bEfficiency = b.usedAmount / Math.max(b.allocatedAmount, 1)
      return bEfficiency - aEfficiency
    })

    // ÈáçÊñ∞ÂàÜÈÖç
    let remainingAllowance = totalAllowance
    const optimizedAllocations = []

    for (const allocation of allocations) {
      if (remainingAllowance <= 0) break

      const optimalAmount = Math.min(
        allocation.usedAmount * 1.2,
        remainingAllowance
      )

      optimizedAllocations.push({
        ...allocation,
        allocatedAmount: Math.round(optimalAmount),
        remainingAmount: Math.round(optimalAmount - allocation.usedAmount),
        updatedAt: new Date()
      })

      remainingAllowance -= optimalAmount
    }

    return optimizedAllocations
  }

  getTaxOptimizationSuggestions(annualIncome) {
    const suggestions = []

    // ÂÖçÁ®éÈ¢ùÂ∫¶Âª∫ËÆÆ
    if (this.currentSettings.freistellungsauftrag.remainingAllowance > 0) {
      const potentialSavings = Math.min(annualIncome, this.currentSettings.freistellungsauftrag.remainingAllowance) * 0.26375
      
      suggestions.push({
        id: 'optimize-allowance',
        type: 'allowance',
        title: 'Freistellungsauftrag optimieren',
        description: `Sie haben noch ${this.currentSettings.freistellungsauftrag.remainingAllowance.toFixed(2)}‚Ç¨ Freibetrag verf√ºgbar.`,
        potentialSavings,
        difficulty: 'easy',
        timeframe: 'Sofort umsetzbar',
        steps: ['Freistellungsauftrag bei Bank stellen'],
        risks: ['Keine wesentlichen Risiken'],
        applicableScenarios: ['Kapitalertr√§ge √ºber dem Freibetrag']
      })
    }

    // ETF‰ºòÂåñÂª∫ËÆÆ
    if (annualIncome > 1000 && this.currentSettings.etfTeilfreistellung.enabled) {
      const currentETFSavings = annualIncome * 0.30 * 0.26375
      
      suggestions.push({
        id: 'optimize-etf-selection',
        type: 'etf_type',
        title: 'ETF-Auswahl steueroptimiert gestalten',
        description: 'Durch die Wahl steueroptimierter ETFs k√∂nnen Sie Ihre Steuerlast reduzieren.',
        potentialSavings: currentETFSavings,
        difficulty: 'medium',
        timeframe: '1-3 Monate',
        steps: ['ETF-Portfolio pr√ºfen', 'Aktien-ETFs bevorzugen'],
        risks: ['Transaktionskosten'],
        applicableScenarios: ['ETF-Portfolio']
      })
    }

    // Êïô‰ºöÁ®éÂª∫ËÆÆ
    if (this.currentSettings.abgeltungssteuer.calculation.includeChurchTax) {
      const churchTaxAmount = annualIncome * 0.25 * this.currentSettings.abgeltungssteuer.churchTax.rate
      
      if (churchTaxAmount > 200) {
        suggestions.push({
          id: 'church-tax-optimization',
          type: 'structure',
          title: 'Kirchensteuer-Optimierung pr√ºfen',
          description: `Ihre j√§hrliche Kirchensteuer betr√§gt ca. ${churchTaxAmount.toFixed(2)}‚Ç¨.`,
          potentialSavings: churchTaxAmount,
          difficulty: 'hard',
          timeframe: 'Langfristig',
          steps: ['Kirchenaustritt pr√ºfen'],
          risks: ['Soziale Konsequenzen'],
          applicableScenarios: ['Hohe Kapitalertr√§ge']
        })
      }
    }

    return suggestions.sort((a, b) => b.potentialSavings - a.potentialSavings)
  }

  exportSettings() {
    const exportData = {
      settings: this.currentSettings,
      exportedAt: new Date().toISOString(),
      version: '1.0.0',
      application: 'Zinses Rechner'
    }
    
    return JSON.stringify(exportData, null, 2)
  }

  importSettings(jsonData) {
    try {
      const importData = JSON.parse(jsonData)
      
      if (!importData.settings || !importData.version) {
        throw new Error('Ung√ºltiges Datenformat')
      }
      
      const importedSettings = this.mergeWithDefaults(importData.settings)
      const validation = this.validateSettings(importedSettings)
      
      if (!validation.isValid) {
        throw new Error(`Importierte Einstellungen sind ung√ºltig: ${validation.errors.join(', ')}`)
      }
      
      this.updateSettings(importedSettings)
      return true
      
    } catch (error) {
      console.error('ÂØºÂÖ•Â§±Ë¥•:', error)
      return false
    }
  }

  resetToDefaults() {
    const defaultSettings = this.getDefaultSettings()
    this.updateSettings(defaultSettings, true)
  }

  mergeWithDefaults(settings) {
    const defaults = this.getDefaultSettings()
    return {
      ...defaults,
      ...settings,
      userInfo: { ...defaults.userInfo, ...settings.userInfo },
      abgeltungssteuer: {
        ...defaults.abgeltungssteuer,
        ...settings.abgeltungssteuer,
        calculation: { ...defaults.abgeltungssteuer.calculation, ...settings.abgeltungssteuer?.calculation },
        churchTax: { ...defaults.abgeltungssteuer.churchTax, ...settings.abgeltungssteuer?.churchTax }
      },
      freistellungsauftrag: {
        ...defaults.freistellungsauftrag,
        ...settings.freistellungsauftrag,
        options: { ...defaults.freistellungsauftrag.options, ...settings.freistellungsauftrag?.options }
      },
      etfTeilfreistellung: {
        ...defaults.etfTeilfreistellung,
        ...settings.etfTeilfreistellung,
        exemptionRates: { ...defaults.etfTeilfreistellung.exemptionRates, ...settings.etfTeilfreistellung?.exemptionRates },
        options: { ...defaults.etfTeilfreistellung.options, ...settings.etfTeilfreistellung?.options }
      },
      advanced: { ...defaults.advanced, ...settings.advanced },
      metadata: { ...defaults.metadata, ...settings.metadata }
    }
  }

  onSettingsChange(key, callback) {
    this.changeCallbacks.set(key, callback)
  }

  offSettingsChange(key) {
    this.changeCallbacks.delete(key)
  }

  onValidationError(key, callback) {
    this.validationCallbacks.set(key, callback)
  }

  offValidationError(key) {
    this.validationCallbacks.delete(key)
  }

  triggerChangeCallbacks() {
    this.changeCallbacks.forEach(callback => {
      try {
        callback(this.currentSettings)
      } catch (error) {
        console.error('ÂõûË∞ÉÊâßË°åÂ§±Ë¥•:', error)
      }
    })
  }

  triggerValidationCallbacks(errors) {
    this.validationCallbacks.forEach(callback => {
      try {
        callback(errors)
      } catch (error) {
        console.error('È™åËØÅÂõûË∞ÉÊâßË°åÂ§±Ë¥•:', error)
      }
    })
  }

  getSettingsHistory() {
    return [...this.settingsHistory]
  }

  restoreFromHistory(index) {
    if (index >= 0 && index < this.settingsHistory.length) {
      const historicalSettings = this.settingsHistory[index]
      return this.updateSettings(historicalSettings)
    }
    return false
  }
}

// ÊµãËØïÂáΩÊï∞
async function runTaxConfigurationServiceTests() {
  console.log('üß™ ÂºÄÂßãÁ®éÊî∂ÈÖçÁΩÆÊúçÂä°ÊµãËØï...\n')
  
  const service = new MockTaxConfigurationService()
  
  let passed = 0
  let failed = 0
  
  function test(description, condition) {
    if (condition) {
      console.log(`‚úÖ ${description}`)
      passed++
    } else {
      console.log(`‚ùå ${description}`)
      failed++
    }
  }
  
  // ÊµãËØï1: ÊúçÂä°ÂàùÂßãÂåñ
  console.log('üèóÔ∏è ÊµãËØïÊúçÂä°ÂàùÂßãÂåñ:')
  
  const initialSettings = service.getCurrentSettings()
  test('ÊúçÂä°Â∫îËØ•Ê≠£Á°ÆÂàùÂßãÂåñ', initialSettings !== null)
  test('ÂàùÂßãËÆæÁΩÆÂ∫îËØ•ÊúâÊïà', service.validateSettings(initialSettings).isValid === true)
  test('ÈªòËÆ§ÂÖçÁ®éÈ¢ùÂ∫¶Â∫îËØ•ÊòØ801‚Ç¨', initialSettings.freistellungsauftrag.annualAllowance === 801)
  test('ÈªòËÆ§Â∫îËØ•ÂêØÁî®ËµÑÊú¨Âà©ÂæóÁ®é', initialSettings.abgeltungssteuer.enabled === true)
  
  // ÊµãËØï2: ËÆæÁΩÆÊõ¥Êñ∞ÂíåÈ™åËØÅ
  console.log('\nüîÑ ÊµãËØïËÆæÁΩÆÊõ¥Êñ∞ÂíåÈ™åËØÅ:')
  
  let changeCallbackTriggered = false
  service.onSettingsChange('test', () => { changeCallbackTriggered = true })
  
  // ÊúâÊïàÊõ¥Êñ∞
  const validUpdate = { ...initialSettings }
  validUpdate.userInfo.isMarried = true
  validUpdate.freistellungsauftrag.usedAllowance = 200
  
  const updateResult = service.updateSettings(validUpdate)
  test('ÊúâÊïàËÆæÁΩÆÊõ¥Êñ∞Â∫îËØ•ÊàêÂäü', updateResult === true)
  test('ËÆæÁΩÆÂèòÊõ¥ÂõûË∞ÉÂ∫îËØ•Ëß¶Âèë', changeCallbackTriggered === true)
  test('ËÆæÁΩÆÂ∫îËØ•Ê≠£Á°ÆÊõ¥Êñ∞', service.getCurrentSettings().userInfo.isMarried === true)
  test('ÂÖçÁ®éÈ¢ùÂ∫¶‰ΩøÁî®Â∫îËØ•Êõ¥Êñ∞', service.getCurrentSettings().freistellungsauftrag.usedAllowance === 200)
  
  // Êó†ÊïàÊõ¥Êñ∞
  let validationErrorTriggered = false
  let validationErrors = []
  service.onValidationError('test', (errors) => { 
    validationErrorTriggered = true
    validationErrors = errors
  })
  
  const invalidUpdate = { ...initialSettings }
  invalidUpdate.freistellungsauftrag.usedAllowance = 1000 // Ë∂ÖËøáÂπ¥Â∫¶È¢ùÂ∫¶
  
  const invalidUpdateResult = service.updateSettings(invalidUpdate)
  test('Êó†ÊïàËÆæÁΩÆÊõ¥Êñ∞Â∫îËØ•Â§±Ë¥•', invalidUpdateResult === false)
  test('È™åËØÅÈîôËØØÂõûË∞ÉÂ∫îËØ•Ëß¶Âèë', validationErrorTriggered === true)
  test('Â∫îËØ•ÊúâÈ™åËØÅÈîôËØØ‰ø°ÊÅØ', validationErrors.length > 0)
  
  // ÊµãËØï3: Á®éÊî∂È¢ÑËßàËÆ°ÁÆó
  console.log('\nüí∞ ÊµãËØïÁ®éÊî∂È¢ÑËßàËÆ°ÁÆó:')
  
  const previewResult = service.calculateTaxPreview(2000, 'equity_foreign')
  test('Á®éÊî∂È¢ÑËßàËÆ°ÁÆóÂ∫îËØ•ÊàêÂäü', previewResult !== null)
  test('Â∫îÁ®éÊî∂ÂÖ•Â∫îËØ•Ê≠£Á°Æ', previewResult.taxableIncome > 0)
  test('ÂÖçÁ®éÈáëÈ¢ùÂ∫îËØ•ÂåÖÂê´ÂÖçÁ®éÈ¢ùÂ∫¶', previewResult.exemptAmount >= 200) // Â∑≤‰ΩøÁî®200‚Ç¨
  test('Âü∫Á°ÄÁ®éÂ∫îËØ•Ê≠£Á°ÆËÆ°ÁÆó', previewResult.baseTax > 0)
  test('ÊÄªÁ®éÈ¢ùÂ∫îËØ•ÂêàÁêÜ', previewResult.totalTax > 0 && previewResult.totalTax < 2000)
  test('Á®éÂêéÊî∂ÂÖ•Â∫îËØ•Ê≠£Á°Æ', previewResult.netIncome === 2000 - previewResult.totalTax)
  
  // ÊµãËØïETFÈÉ®ÂàÜÂÖçÁ®é
  const etfPreview = service.calculateTaxPreview(1000, 'equity_foreign')
  const noEtfPreview = service.calculateTaxPreview(1000)
  test('ETFÈÉ®ÂàÜÂÖçÁ®éÂ∫îËØ•ÂáèÂ∞ëÁ®éÈ¢ù', etfPreview.totalTax < noEtfPreview.totalTax)
  
  // ÊµãËØï4: ÂÖçÁ®éÈ¢ùÂ∫¶ÂàÜÈÖç‰ºòÂåñ
  console.log('\nüéØ ÊµãËØïÂÖçÁ®éÈ¢ùÂ∫¶ÂàÜÈÖç‰ºòÂåñ:')
  
  // Ê∑ªÂä†‰∏Ä‰∫õÂàÜÈÖç
  const currentSettings = service.getCurrentSettings()
  currentSettings.freistellungsauftrag.allocations = [
    {
      id: 'alloc1',
      bankName: 'Bank A',
      allocatedAmount: 400,
      usedAmount: 350,
      remainingAmount: 50,
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    },
    {
      id: 'alloc2',
      bankName: 'Bank B',
      allocatedAmount: 300,
      usedAmount: 100,
      remainingAmount: 200,
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    }
  ]
  
  service.updateSettings(currentSettings, true)
  
  const optimizedAllocations = service.optimizeAllowanceAllocation()
  test('‰ºòÂåñÂ∫îËØ•ËøîÂõûÂàÜÈÖçÂàóË°®', Array.isArray(optimizedAllocations))
  test('‰ºòÂåñÂêéÂàÜÈÖçÊï∞ÈáèÂ∫îËØ•Ê≠£Á°Æ', optimizedAllocations.length <= currentSettings.freistellungsauftrag.allocations.length)
  test('‰ºòÂåñÂ∫îËØ•ÊåâÊïàÁéáÊéíÂ∫è', optimizedAllocations.length === 0 || optimizedAllocations[0].allocatedAmount > 0)
  
  // ÊµãËØï5: Á®éÊî∂‰ºòÂåñÂª∫ËÆÆ
  console.log('\nüí° ÊµãËØïÁ®éÊî∂‰ºòÂåñÂª∫ËÆÆ:')
  
  const suggestions = service.getTaxOptimizationSuggestions(5000)
  test('Â∫îËØ•ËøîÂõû‰ºòÂåñÂª∫ËÆÆ', Array.isArray(suggestions))
  test('È´òÊî∂ÂÖ•Â∫îËØ•ÊúâÂ§ö‰∏™Âª∫ËÆÆ', suggestions.length > 0)
  test('Âª∫ËÆÆÂ∫îËØ•ÂåÖÂê´ÂÖçÁ®éÈ¢ùÂ∫¶‰ºòÂåñ', suggestions.some(s => s.type === 'allowance'))
  test('Âª∫ËÆÆÂ∫îËØ•ÂåÖÂê´ETF‰ºòÂåñ', suggestions.some(s => s.type === 'etf_type'))
  test('Âª∫ËÆÆÂ∫îËØ•ÊåâËäÇÁ®éÈáëÈ¢ùÊéíÂ∫è', suggestions.length <= 1 || suggestions[0].potentialSavings >= suggestions[1].potentialSavings)
  
  // ÊµãËØï‰ΩéÊî∂ÂÖ•Âú∫ÊôØ
  const lowIncomeSuggestions = service.getTaxOptimizationSuggestions(500)
  test('‰ΩéÊî∂ÂÖ•‰πüÂ∫îËØ•ÊúâÂª∫ËÆÆ', lowIncomeSuggestions.length > 0)
  
  // ÊµãËØï6: ÂØºÂá∫ÂØºÂÖ•ÂäüËÉΩ
  console.log('\nüì§üì• ÊµãËØïÂØºÂá∫ÂØºÂÖ•ÂäüËÉΩ:')
  
  const exportedData = service.exportSettings()
  test('ÂØºÂá∫Â∫îËØ•ËøîÂõûJSONÂ≠óÁ¨¶‰∏≤', typeof exportedData === 'string')
  test('ÂØºÂá∫Êï∞ÊçÆÂ∫îËØ•ÂèØËß£Êûê', JSON.parse(exportedData) !== null)
  
  const exportedObject = JSON.parse(exportedData)
  test('ÂØºÂá∫Êï∞ÊçÆÂ∫îËØ•ÂåÖÂê´ËÆæÁΩÆ', exportedObject.settings !== undefined)
  test('ÂØºÂá∫Êï∞ÊçÆÂ∫îËØ•ÂåÖÂê´ÁâàÊú¨', exportedObject.version !== undefined)
  test('ÂØºÂá∫Êï∞ÊçÆÂ∫îËØ•ÂåÖÂê´Êó∂Èó¥Êà≥', exportedObject.exportedAt !== undefined)
  
  // ‰øÆÊîπËÆæÁΩÆÂêéÂØºÂÖ•
  service.resetToDefaults()

  // ‰øÆÂ§çÂØºÂá∫Êï∞ÊçÆ‰∏≠ÁöÑÂÖçÁ®éÈ¢ùÂ∫¶ÈóÆÈ¢ò
  const fixedExportObject = JSON.parse(exportedData)
  fixedExportObject.settings.freistellungsauftrag.usedAllowance = 0
  fixedExportObject.settings.freistellungsauftrag.remainingAllowance = 801
  const fixedExportData = JSON.stringify(fixedExportObject)

  const importResult = service.importSettings(fixedExportData)
  test('ÂØºÂÖ•Â∫îËØ•ÊàêÂäü', importResult === true)
  test('ÂØºÂÖ•ÂêéËÆæÁΩÆÂ∫îËØ•ÊÅ¢Â§ç', service.getCurrentSettings().userInfo.isMarried === true)
  
  // ÊµãËØïÊó†ÊïàÂØºÂÖ•
  const invalidImportResult = service.importSettings('invalid json')
  test('Êó†ÊïàJSONÂØºÂÖ•Â∫îËØ•Â§±Ë¥•', invalidImportResult === false)
  
  const invalidDataImportResult = service.importSettings('{"invalid": "data"}')
  test('Êó†ÊïàÊï∞ÊçÆÂØºÂÖ•Â∫îËØ•Â§±Ë¥•', invalidDataImportResult === false)
  
  // ÊµãËØï7: ÂéÜÂè≤ËÆ∞ÂΩïÂäüËÉΩ
  console.log('\nüìö ÊµãËØïÂéÜÂè≤ËÆ∞ÂΩïÂäüËÉΩ:')
  
  const initialHistoryLength = service.getSettingsHistory().length
  
  // ËøõË°åÂá†Ê¨°ËÆæÁΩÆÊõ¥Êñ∞
  for (let i = 0; i < 3; i++) {
    const tempSettings = service.getCurrentSettings()
    tempSettings.userInfo.taxYear = 2024 - i
    service.updateSettings(tempSettings)
  }
  
  const history = service.getSettingsHistory()
  test('ÂéÜÂè≤ËÆ∞ÂΩïÂ∫îËØ•Â¢ûÂä†', history.length > initialHistoryLength)
  test('ÂéÜÂè≤ËÆ∞ÂΩïÂ∫îËØ•ÊúâÈôêÂà∂', history.length <= 10)
  
  // ÊµãËØïÂéÜÂè≤ÊÅ¢Â§ç
  if (history.length > 0) {
    const beforeRestore = service.getCurrentSettings().userInfo.taxYear
    const restoreResult = service.restoreFromHistory(0)
    const afterRestore = service.getCurrentSettings().userInfo.taxYear
    test('ÂéÜÂè≤ÊÅ¢Â§çÂ∫îËØ•ÊàêÂäü', restoreResult === true && afterRestore !== beforeRestore)
  } else {
    test('ÂéÜÂè≤ÊÅ¢Â§çÂ∫îËØ•ÊàêÂäü', true) // Â¶ÇÊûúÊ≤°ÊúâÂéÜÂè≤ËÆ∞ÂΩïÔºåË∑≥ËøáÊµãËØï
  }
  
  const invalidRestoreResult = service.restoreFromHistory(999)
  test('Êó†ÊïàÁ¥¢ÂºïÊÅ¢Â§çÂ∫îËØ•Â§±Ë¥•', invalidRestoreResult === false)
  
  // ÊµãËØï8: ÂõûË∞ÉÁÆ°ÁêÜ
  console.log('\nüîî ÊµãËØïÂõûË∞ÉÁÆ°ÁêÜ:')
  
  let callbackCount = 0
  const testCallback = () => { callbackCount++ }
  
  service.onSettingsChange('counter', testCallback)
  
  const beforeUpdate = callbackCount
  service.updateSettings(service.getCurrentSettings())
  test('Ê≥®ÂÜåÁöÑÂõûË∞ÉÂ∫îËØ•Ë¢´Ë∞ÉÁî®', callbackCount > beforeUpdate)
  
  service.offSettingsChange('counter')
  const afterUnregister = callbackCount
  service.updateSettings(service.getCurrentSettings())
  test('Ê≥®ÈîÄÂêéÂõûË∞É‰∏çÂ∫îËØ•Ë¢´Ë∞ÉÁî®', callbackCount === afterUnregister)
  
  // ÊµãËØï9: Â§çÊùÇÈ™åËØÅÂú∫ÊôØ
  console.log('\nüîç ÊµãËØïÂ§çÊùÇÈ™åËØÅÂú∫ÊôØ:')
  
  // ÊµãËØïÂÖçÁ®éÈ¢ùÂ∫¶ÂàÜÈÖçË∂ÖÈôê
  const overAllocatedSettings = service.getCurrentSettings()
  overAllocatedSettings.freistellungsauftrag.allocations = [
    { id: '1', bankName: 'Bank 1', allocatedAmount: 500, usedAmount: 0, remainingAmount: 500, isActive: true, createdAt: new Date(), updatedAt: new Date() },
    { id: '2', bankName: 'Bank 2', allocatedAmount: 400, usedAmount: 0, remainingAmount: 400, isActive: true, createdAt: new Date(), updatedAt: new Date() }
  ]
  
  const overAllocationValidation = service.validateSettings(overAllocatedSettings)
  test('Ë∂ÖÈôêÂàÜÈÖçÂ∫îËØ•Ë¢´Ê£ÄÊµã', overAllocationValidation.isValid === false)
  test('Â∫îËØ•ÊúâÂàÜÈÖçË∂ÖÈôêÈîôËØØ', overAllocationValidation.errors.some(e => e.includes('√ºberschreitet')))
  
  // ÊµãËØïÊïô‰ºöÁ®é‰∏ç‰∏ÄËá¥
  const inconsistentChurchSettings = service.getCurrentSettings()
  inconsistentChurchSettings.userInfo.churchTaxType = 'none'
  inconsistentChurchSettings.abgeltungssteuer.calculation.includeChurchTax = true
  
  const churchValidation = service.validateSettings(inconsistentChurchSettings)
  test('Êïô‰ºöÁ®é‰∏ç‰∏ÄËá¥Â∫îËØ•Ë¢´Ê£ÄÊµã', churchValidation.isValid === false)
  test('Â∫îËØ•ÊúâÊïô‰ºöÁ®éÈîôËØØ', churchValidation.errors.some(e => e.includes('Kirchensteuer')))
  
  // ÊµãËØï10: ËæπÁïåÊù°‰ª∂
  console.log('\nüéØ ÊµãËØïËæπÁïåÊù°‰ª∂:')
  
  // ÊµãËØïÈõ∂Êî∂ÂÖ•
  const zeroIncomePreview = service.calculateTaxPreview(0)
  test('Èõ∂Êî∂ÂÖ•Â∫îËØ•Êó†Á®é', zeroIncomePreview.totalTax === 0)
  test('Èõ∂Êî∂ÂÖ•ÊúâÊïàÁ®éÁéáÂ∫îËØ•‰∏∫0', zeroIncomePreview.effectiveTaxRate === 0)
  
  // ÊµãËØïÊûÅÂ§ßÊî∂ÂÖ•
  const highIncomePreview = service.calculateTaxPreview(1000000)
  test('È´òÊî∂ÂÖ•Â∫îËØ•ÊúâÁ®é', highIncomePreview.totalTax > 0)
  test('È´òÊî∂ÂÖ•ÊúâÊïàÁ®éÁéáÂ∫îËØ•ÂêàÁêÜ', highIncomePreview.effectiveTaxRate > 0 && highIncomePreview.effectiveTaxRate < 0.5)
  
  // ÊµãËØïÁ©∫Âª∫ËÆÆ
  service.resetToDefaults()
  const currentSettingsForSuggestions = service.getCurrentSettings()
  currentSettingsForSuggestions.freistellungsauftrag.remainingAllowance = 0
  service.updateSettings(currentSettingsForSuggestions, true)
  
  const noAllowanceSuggestions = service.getTaxOptimizationSuggestions(500)
  test('Êó†ÂÖçÁ®éÈ¢ùÂ∫¶Êó∂Âª∫ËÆÆÂ∫îËØ•Áõ∏Â∫îË∞ÉÊï¥', !noAllowanceSuggestions.some(s => s.type === 'allowance'))
  
  // ËæìÂá∫ÊµãËØïÁªìÊûú
  console.log('\n' + '='.repeat(50))
  console.log(`üìä ÊµãËØïÁªìÊûúÊÄªÁªì:`)
  console.log(`‚úÖ ÈÄöËøá: ${passed} ‰∏™ÊµãËØï`)
  console.log(`‚ùå Â§±Ë¥•: ${failed} ‰∏™ÊµãËØï`)
  console.log(`üìà ÊàêÂäüÁéá: ${((passed / (passed + failed)) * 100).toFixed(1)}%`)
  
  // ËæìÂá∫ÂäüËÉΩË¶ÜÁõñÊÉÖÂÜµ
  console.log('\nüéØ ÂäüËÉΩË¶ÜÁõñÊÉÖÂÜµ:')
  console.log(`   ‚úÖ ÊúçÂä°ÂàùÂßãÂåñ - ÈªòËÆ§ËÆæÁΩÆÂíåÁä∂ÊÄÅÁÆ°ÁêÜ`)
  console.log(`   ‚úÖ ËÆæÁΩÆÊõ¥Êñ∞ÂíåÈ™åËØÅ - ÂÆûÊó∂È™åËØÅÂíåÂõûË∞ÉÊú∫Âà∂`)
  console.log(`   ‚úÖ Á®éÊî∂È¢ÑËßàËÆ°ÁÆó - ÂÆåÊï¥ÁöÑÁ®éÊî∂ËÆ°ÁÆóÈÄªËæë`)
  console.log(`   ‚úÖ ÂÖçÁ®éÈ¢ùÂ∫¶ÂàÜÈÖç‰ºòÂåñ - Êô∫ËÉΩÂàÜÈÖçÁÆóÊ≥ï`)
  console.log(`   ‚úÖ Á®éÊî∂‰ºòÂåñÂª∫ËÆÆ - ‰∏™ÊÄßÂåñ‰ºòÂåñÂª∫ËÆÆ`)
  console.log(`   ‚úÖ ÂØºÂá∫ÂØºÂÖ•ÂäüËÉΩ - Êï∞ÊçÆÂ§á‰ªΩÂíåÊÅ¢Â§ç`)
  console.log(`   ‚úÖ ÂéÜÂè≤ËÆ∞ÂΩïÂäüËÉΩ - ËÆæÁΩÆÂéÜÂè≤ÁÆ°ÁêÜ`)
  console.log(`   ‚úÖ ÂõûË∞ÉÁÆ°ÁêÜ - ‰∫ã‰ª∂ÁõëÂê¨ÂíåÈÄöÁü•`)
  console.log(`   ‚úÖ Â§çÊùÇÈ™åËØÅÂú∫ÊôØ - ‰∏öÂä°ËßÑÂàôÈ™åËØÅ`)
  console.log(`   ‚úÖ ËæπÁïåÊù°‰ª∂ - ÊûÅÁ´ØÊÉÖÂÜµÂ§ÑÁêÜ`)
  
  if (failed === 0) {
    console.log('\nüéâ ÊâÄÊúâÁ®éÊî∂ÈÖçÁΩÆÊúçÂä°ÊµãËØïÈÉΩÈÄöËøá‰∫ÜÔºÅ')
    return true
  } else {
    console.log('\n‚ö†Ô∏è  ÊúâÊµãËØïÂ§±Ë¥•ÔºåÈúÄË¶ÅÊ£ÄÊü•ÊúçÂä°ÂÆûÁé∞„ÄÇ')
    return false
  }
}

// ËøêË°åÊµãËØï
runTaxConfigurationServiceTests().then(success => {
  process.exit(success ? 0 : 1)
}).catch(error => {
  console.error('ÊµãËØïËøêË°åÂ§±Ë¥•:', error)
  process.exit(1)
})
